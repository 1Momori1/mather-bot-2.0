import telebot
from telebot import types
import json
from db import init_db, add_local_bot, add_ssh_bot, get_bots, get_bot_by_id, update_bot_status, delete_bot, update_bot_schedule
from local_utils import start_local_bot, stop_local_bot, is_local_bot_running, get_local_bot_log
from ssh_utils import start_ssh_bot, stop_ssh_bot, is_ssh_bot_running, get_ssh_bot_log
from config import API_TOKEN, WHITE_LIST_IDS

bot = telebot.TeleBot(API_TOKEN)

init_db()

def notify_admins(text):
    for admin_id in WHITE_LIST_IDS:
        try:
            bot.send_message(admin_id, text, parse_mode='HTML')
        except Exception:
            pass

def check_access(message_or_call):
    user_id = message_or_call.from_user.id
    if user_id not in WHITE_LIST_IDS:
        if hasattr(message_or_call, 'message'):
            bot.send_message(message_or_call.message.chat.id, '‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        else:
            bot.send_message(message_or_call.chat.id, '‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        notify_admins(f'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!\nID: <code>{user_id}</code>')
        return False
    return True

def main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞', callback_data='add_bot'))
    markup.add(types.InlineKeyboardButton('üìã –í—Å–µ –±–æ—Ç—ã', callback_data='list_bots_all'))
    markup.add(types.InlineKeyboardButton('üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ', callback_data='list_bots_local'))
    markup.add(types.InlineKeyboardButton('üåê SSH', callback_data='list_bots_ssh'))
    markup.add(types.InlineKeyboardButton('‚è∞ –≠–∫—Å–ø–æ—Ä—Ç', callback_data='export_bots'))
    markup.add(types.InlineKeyboardButton('üì• –ò–º–ø–æ—Ä—Ç', callback_data='import_bots'))
    markup.add(types.InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help'))
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    if not check_access(message):
        return
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤:', reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data == 'add_bot')
def add_bot_callback(call):
    if not check_access(call):
        return
    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:')
    bot.register_next_step_handler(msg, process_bot_name)

def process_bot_name(message):
    name = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ù–æ—É—Ç–±—É–∫, –¢–µ–ª–µ—Ñ–æ–Ω):')
    bot.register_next_step_handler(msg, lambda m: process_bot_group(m, name))

def process_bot_group(message, name):
    group_name = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–õ–æ–∫–∞–ª—å–Ω—ã–π', callback_data=f'type_local_{name}_{group_name}'))
    markup.add(types.InlineKeyboardButton('SSH', callback_data=f'type_ssh_{name}_{group_name}'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('type_'))
def process_bot_type(call):
    data = call.data.split('_')
    bot_type = data[1]
    name = data[2]
    group_name = '_'.join(data[3:])
    if bot_type == 'local':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –±–æ—Ç–∞:')
        bot.register_next_step_handler(msg, lambda m: process_bot_path(m, name, 'local', None, None, None, None, None, group_name))
    else:
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ host (IP) —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:')
        bot.register_next_step_handler(msg, lambda m: process_ssh_host(m, name, group_name))

def process_ssh_host(message, name, group_name):
    host = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–æ–±—ã—á–Ω–æ 22):')
    bot.register_next_step_handler(msg, lambda m: process_ssh_port(m, name, host, group_name))

def process_ssh_port(message, name, host, group_name):
    try:
        port = int(message.text.strip())
    except:
        port = 22
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:')
    bot.register_next_step_handler(msg, lambda m: process_ssh_user(m, name, host, port, group_name))

def process_ssh_user(message, name, host, port, group_name):
    user = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–∞—Ä–æ–ª—å', callback_data=f'ssh_auth_pass_{name}_{host}_{port}_{user}_{group_name}'))
    markup.add(types.InlineKeyboardButton('SSH-–∫–ª—é—á', callback_data=f'ssh_auth_key_{name}_{host}_{port}_{user}_{group_name}'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('ssh_auth_pass_'))
def ssh_auth_pass_callback(call):
    _, _, name, host, port, user, group_name = call.data.split('_', 6)
    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(msg, lambda m: process_ssh_password(m, name, host, int(port), user, group_name))

@bot.callback_query_handler(func=lambda call: call.data.startswith('ssh_auth_key_'))
def ssh_auth_key_callback(call):
    _, _, name, host, port, user, group_name = call.data.split('_', 6)
    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /home/user/.ssh/id_rsa):')
    bot.register_next_step_handler(msg, lambda m: process_ssh_key(m, name, host, int(port), user, group_name))

def process_ssh_password(message, name, host, port, user, group_name):
    password = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:')
    bot.register_next_step_handler(msg, lambda m: process_bot_path(m, name, 'ssh', host, port, user, password, None, group_name))

def process_ssh_key(message, name, host, port, user, group_name):
    ssh_key_path = message.text.strip()
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:')
    bot.register_next_step_handler(msg, lambda m: process_bot_path(m, name, 'ssh', host, port, user, None, ssh_key_path, group_name))

def process_bot_path(message, name, bot_type, host=None, port=None, user=None, password=None, ssh_key_path=None, group_name=None):
    path = message.text.strip()
    try:
        if bot_type == 'local':
            add_local_bot(name, path, group_name)
        else:
            add_ssh_bot(name, path, host, port, user, password, ssh_key_path, group_name)
        bot.send_message(message.chat.id, f'‚úÖ –ë–æ—Ç "{name}" –¥–æ–±–∞–≤–ª–µ–Ω!')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞: {e}')
    bot.send_message(message.chat.id, '–ú–µ–Ω—é:', reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data == 'list_bots')
def show_bots_list_callback(call):
    if not check_access(call):
        return
    show_bots_list(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'list_bots_all')
def show_all_bots_callback(call):
    show_bots_list(call.message, filter_type='all')

@bot.callback_query_handler(func=lambda call: call.data == 'list_bots_local')
def show_local_bots_callback(call):
    show_bots_list(call.message, filter_type='local')

@bot.callback_query_handler(func=lambda call: call.data == 'list_bots_ssh')
def show_ssh_bots_callback(call):
    show_bots_list(call.message, filter_type='ssh')

def show_bots_list(message, filter_type='all'):
    if not check_access(message):
        return
    bots = get_bots()
    if not bots:
        bot.send_message(message.chat.id, '–ë–æ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.', reply_markup=main_menu())
        return
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ group_name
    groups = {}
    for bot_row in bots:
        bot_id, name, script_path, status, bot_type, host, port, user, ssh_key_path, group_name, schedule = bot_row
        if filter_type != 'all' and bot_type != filter_type:
            continue
        group = group_name or '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'
        if group not in groups:
            groups[group] = []
        groups[group].append(bot_row)
    for group, group_bots in groups.items():
        bot.send_message(message.chat.id, f'üì¶ <b>{group}</b>', parse_mode='HTML')
        for bot_row in group_bots:
            bot_id, name, script_path, status, bot_type, host, port, user, ssh_key_path, group_name, schedule = bot_row
            if bot_type == 'local':
                real_status = 'running' if is_local_bot_running(script_path) else 'stopped'
            else:
                full_row = get_bot_by_id(bot_id)
                _, _, _, _, _, _, _, _, password, ssh_key_path, _, schedule = full_row
                real_status = 'running' if is_ssh_bot_running(host, port, user, password, script_path, ssh_key_path) else 'stopped'
            text = f"ü§ñ <b>{name}</b>\n–ü—É—Ç—å: <code>{script_path}</code>\n–°—Ç–∞—Ç—É—Å: <b>{real_status}</b>\n–¢–∏–ø: <b>{bot_type}</b>"
            if schedule:
                text += f"\n‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {schedule}"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('üìÑ –õ–æ–≥–∏', callback_data=f'logs_{bot_id}'))
            markup.add(types.InlineKeyboardButton('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'schedule_{bot_id}'))
            if real_status == 'stopped':
                markup.add(types.InlineKeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'start_{bot_id}'))
            else:
                markup.add(types.InlineKeyboardButton('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=f'confirm_stop_{bot_id}'))
                markup.add(types.InlineKeyboardButton('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'confirm_restart_{bot_id}'))
            markup.add(types.InlineKeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'confirm_delete_{bot_id}'))
            bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')
    bot.send_message(message.chat.id, '–ú–µ–Ω—é:', reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('logs_'))
def logs_callback(call):
    bot_id = int(call.data.split('_')[1])
    bot_row = get_bot_by_id(bot_id)
    if not bot_row:
        bot.send_message(call.message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    _, name, script_path, _, bot_type, host, port, user, password, ssh_key_path, _ = bot_row
    if bot_type == 'local':
        log_text = get_local_bot_log(script_path)
    else:
        log_text = get_ssh_bot_log(host, port, user, password, script_path, ssh_key_path)
    if not log_text:
        log_text = '–õ–æ–≥ –ø—É—Å—Ç.'
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(log_text) > 4000:
        log_text = log_text[-4000:]
    bot.send_message(call.message.chat.id, f'üìÑ –õ–æ–≥–∏ –±–æ—Ç–∞ <b>{name}</b>:\n<pre>{log_text}</pre>', parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_'))
def schedule_callback(call):
    bot_id = int(call.data.split('_')[1])
    bot_row = get_bot_by_id(bot_id)
    if not bot_row:
        bot.send_message(call.message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    _, name, *_ , schedule = bot_row
    msg = f'–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{name}</b>: {schedule or "–Ω–µ –∑–∞–¥–∞–Ω–æ"}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00),\n–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "—É–¥–∞–ª–∏—Ç—å", —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.'
    bot.send_message(call.message.chat.id, msg, parse_mode='HTML')
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda m: process_schedule_input(m, bot_id))

def process_schedule_input(message, bot_id):
    text = message.text.strip()
    if text.lower() == '—É–¥–∞–ª–∏—Ç—å':
        update_bot_schedule(bot_id, None)
        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.')
    else:
        # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è HH:MM
        import re
        if re.match(r'^\d{2}:\d{2}$', text):
            update_bot_schedule(bot_id, text)
            bot.send_message(message.chat.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}')
        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å".')
            bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: process_schedule_input(m, bot_id))
    show_bots_list(message)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_stop_'))
def confirm_stop_callback(call):
    bot_id = int(call.data.split('_')[2])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=f'stop_{bot_id}'))
    markup.add(types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='cancel'))
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def confirm_delete_callback(call):
    bot_id = int(call.data.split('_')[2])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{bot_id}'))
    markup.add(types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='cancel'))
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_restart_'))
def confirm_restart_callback(call):
    bot_id = int(call.data.split('_')[2])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'restart_{bot_id}'))
    markup.add(types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='cancel'))
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_callback(call):
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.answer_callback_query(call.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

# --- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('restart_'))
def restart_bot_callback(call):
    bot_id = int(call.data.split('_')[1])
    stop_bot(call.message, bot_id)
    start_bot(call.message, bot_id)
    bot.answer_callback_query(call.id, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!')
    bot_row = get_bot_by_id(bot_id)
    if bot_row:
        _, name, *_ = bot_row
        notify_admins(f'üîÑ <b>–ë–æ—Ç "{name}"</b> –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>{call.from_user.id}</code>')

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_'))
def start_bot_callback(call):
    if not check_access(call):
        return
    bot_id = int(call.data.split('_')[1])
    start_bot(call.message, bot_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('stop_'))
def stop_bot_callback(call):
    if not check_access(call):
        return
    bot_id = int(call.data.split('_')[1])
    stop_bot(call.message, bot_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_bot_callback(call):
    if not check_access(call):
        return
    bot_id = int(call.data.split('_')[1])
    delete_bot_handler(call.message, bot_id)

def start_bot(message, bot_id):
    if not check_access(message):
        return
    bot_row = get_bot_by_id(bot_id)
    if not bot_row:
        bot.send_message(message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    _, name, script_path, status, bot_type, host, port, user, password, ssh_key_path, group_name = bot_row
    if status == 'running':
        bot.send_message(message.chat.id, f'–ë–æ—Ç "{name}" —É–∂–µ –∑–∞–ø—É—â–µ–Ω!')
        return
    if bot_type == 'local':
        ok, err = start_local_bot(script_path)
    else:
        ok, err = start_ssh_bot(host, port, user, password, script_path, ssh_key_path)
    if ok:
        update_bot_status(bot_id, 'running')
        bot.send_message(message.chat.id, f'‚ñ∂Ô∏è –ë–æ—Ç "{name}" –∑–∞–ø—É—â–µ–Ω!')
        notify_admins(f'‚ñ∂Ô∏è <b>–ë–æ—Ç "{name}"</b> –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>{message.from_user.id}</code>')
    else:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {err}')
    show_bots_list(message)

def stop_bot(message, bot_id):
    if not check_access(message):
        return
    bot_row = get_bot_by_id(bot_id)
    if not bot_row:
        bot.send_message(message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    _, name, script_path, status, bot_type, host, port, user, password, ssh_key_path, group_name = bot_row
    if status == 'stopped':
        bot.send_message(message.chat.id, f'–ë–æ—Ç "{name}" —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        return
    if bot_type == 'local':
        ok, err = stop_local_bot(name)
    else:
        ok, err = stop_ssh_bot(host, port, user, password, name, ssh_key_path)
    if ok:
        update_bot_status(bot_id, 'stopped')
        bot.send_message(message.chat.id, f'‚èπÔ∏è –ë–æ—Ç "{name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        notify_admins(f'‚èπÔ∏è <b>–ë–æ—Ç "{name}"</b> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>{message.from_user.id}</code>')
    else:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {err}')
    show_bots_list(message)

def delete_bot_handler(message, bot_id):
    if not check_access(message):
        return
    bot_row = get_bot_by_id(bot_id)
    if not bot_row:
        bot.send_message(message.chat.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    _, name, *_ = bot_row
    delete_bot(bot_id)
    bot.send_message(message.chat.id, f'üóëÔ∏è –ë–æ—Ç "{name}" —É–¥–∞–ª—ë–Ω!')
    show_bots_list(message)

@bot.callback_query_handler(func=lambda call: call.data == 'export_bots')
def export_bots_callback(call):
    bots = get_bots()
    bots_data = []
    for b in bots:
        bots_data.append({
            'name': b[1], 'script_path': b[2], 'type': b[4], 'host': b[5], 'port': b[6], 'user': b[7],
            'ssh_key_path': b[8], 'group_name': b[9], 'schedule': b[10]
        })
    with open('bots_export.json', 'w', encoding='utf-8') as f:
        json.dump(bots_data, f, ensure_ascii=False, indent=2)
    with open('bots_export.json', 'rb') as f:
        bot.send_document(call.message.chat.id, f, caption='–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (JSON)')

@bot.callback_query_handler(func=lambda call: call.data == 'import_bots')
def import_bots_callback(call):
    bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–æ–≤.')
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_import_file)

def process_import_file(message):
    if not message.document:
        bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.')
        return
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    try:
        bots_data = json.loads(downloaded_file.decode('utf-8'))
        for b in bots_data:
            if b.get('type') == 'local':
                add_local_bot(b['name'], b['script_path'], b.get('group_name'), b.get('schedule'))
            else:
                add_ssh_bot(b['name'], b['script_path'], b.get('host'), b.get('port'), b.get('user'), None, b.get('ssh_key_path'), b.get('group_name'), b.get('schedule'))
        bot.send_message(message.chat.id, f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(bots_data)} –±–æ—Ç–æ–≤.')
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}')
    show_bots_list(message)

@bot.callback_query_handler(func=lambda call: call.data == 'help')
def help_callback(call):
    help_text = (
        '‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –±–æ—Ç–æ–≤</b>\n\n'
        '‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ SSH, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞).\n'
        '‚Ä¢ <b>üìã –í—Å–µ –±–æ—Ç—ã</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º.\n'
        '‚Ä¢ <b>üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ</b> ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–æ—Ç—ã.\n'
        '‚Ä¢ <b>üåê SSH</b> ‚Äî —Ç–æ–ª—å–∫–æ SSH-–±–æ—Ç—ã.\n'
        '‚Ä¢ <b>üìÑ –õ–æ–≥–∏</b> ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.\n'
        '‚Ä¢ <b>‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å</b> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.\n'
        '‚Ä¢ <b>‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b> ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º).\n'
        '‚Ä¢ <b>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</b> ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º).\n'
        '‚Ä¢ <b>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º).\n'
        '\n'
        '<b>–ì—Ä—É–ø–ø—ã</b> ‚Äî –ø–æ–∑–≤–æ–ª—è—é—Ç —É–¥–æ–±–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –±–æ—Ç–æ–≤ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –∏–ª–∏ –∑–∞–¥–∞—á–∞–º.\n'
        '\n'
        '–î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n'
        '\n'
        '–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!\n'
        '\n'
        '–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    )
    bot.send_message(call.message.chat.id, help_text, parse_mode='HTML') 